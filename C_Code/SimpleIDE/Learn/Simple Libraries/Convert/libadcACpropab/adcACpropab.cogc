/**
 * @file adcACpropab.cogc
 *
 * @author Andy Lindsay
 *
 * @copyright
 * Copyright (C) Parallax, Inc. 2013. All Rights MIT Licensed.
 *
 * @brief Signals ADC124S021 chip.  Current rate is about 70 ksps.  I'm hoping to
 * clean it up and get closer to 100 in this COGC version.  Will probably use ASM
 * to squeeze some more out of it.
 * @n @n <b><i>CONSTRUCTION ZONE:</i></b> This library is preliminary, major revisions
 * pending, not for release.
 */

#include <propeller.h>
#include "adcACpropab.h"

#define clockfreq (*(int*) 0)

_NAKED
void main(void)
{
  AdcMailbox_st *mbox;
  unsigned int* addr;
  unsigned int* ptr;
  int chNow, chThen;
  int dout, din, clk, cs, mask;
  int ndout, ndin, nclk, ncs;
  int val, i, doutval, dinval, state;

  mbox = (AdcMailbox_st*) PAR;
  dout = (1 << mbox->dout);
  ndout = ~dout;
  doutval = mbox->dout;
  din = (1 << mbox->din);
  ndin = ~din;
  dinval = mbox->din;
  clk = (1 << mbox->clk);
  nclk = ~clk;
  cs = (1 << mbox->cs);
  ncs = ~cs;
  mask = mbox->mask;
  addr = mbox->addr;
  OUTA |= cs;                                 // high(cs);
  DIRA |= cs;
  OUTA |= clk;                                // high(clk);
  DIRA |= clk;
  OUTA &= ndin;                               // low(din);
  DIRA |= din;
  DIRA &= ndout;                              // input(dout);
  OUTA &= ncs;                                // low(cs);
  DIRA |= (1 << 26);
  OUTA &= ~(1 << 26);

  chNow = mbox->stidx;
  chThen = mbox->stidx;

  while(1)
  {
    if((mask >> chNow) & 1)
    {
      chNow <<= 12;
      val = 0;                                // int val = 0;
      for(i = 15; i >= 0; i--)                // for(int i = 15; i >= 0; i--)
      {                                       // {
        OUTA &= nclk;                         //   low(clk);
        val <<= 1;                            //   val = val << 1;
        state = (chNow >> i) & 1;             //   set_output(din, (channel >> i) & 1);
        OUTA |= clk;                          //   high(clk);
        if(state)
        {
          OUTA |= din;
        }
        else
        {
          OUTA &= ndin;
        }
        state = INA;                          //   val = val + (get_state(dout) & 1);
        state &= dout;
        state = state >> doutval;
        val += state;
      }
      chNow >>= 12;
      ptr = addr + chThen;
      *ptr = val;
      chThen = chNow;
    }
    chNow++;
    chNow &= 0b11;
    OUTA ^= (1 << 26);
  }
}

extern unsigned int _load_start_adcACpropab_cog[];
const unsigned int *adcACpropab_code = _load_start_adcACpropab_cog;

/**
 * TERMS OF USE: MIT License
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

